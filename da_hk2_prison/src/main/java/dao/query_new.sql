USE master
GO

DROP DATABASE IF EXISTS prisoner_dahk
CREATE DATABASE prisoner_dahk
GO

use prisoner_dahk
go

--Table
DROP TABLE IF EXISTS [USER]
CREATE TABLE [USER]
(
	id SMALLINT PRIMARY KEY IDENTITY,
	email NVARCHAR(50),
	[password] NVARCHAR(50),
	[level] TINYINT,
	create_time DATE,
	update_time DATE
)

DROP TABLE IF EXISTS DANGEROUS_LEVEL
CREATE TABLE DANGEROUS_LEVEL
(
	dangerous_id SMALLINT PRIMARY KEY IDENTITY,
	dangerous_name NVARCHAR(50),
	id_crime SMALLINT
)

DROP TABLE IF EXISTS [CASE]
CREATE TABLE [CASE]
(
	case_id SMALLINT PRIMARY KEY IDENTITY,
	case_name NVARCHAR(50),
	classify NVARCHAR(50),
	id_dglvl SMALLINT
)

DROP TABLE IF EXISTS CRIME
CREATE TABLE CRIME
(
	crime_id SMALLINT PRIMARY KEY IDENTITY,
	crime_name NVARCHAR(50),
	dangerous_id SMALLINT,
	duration SMALLINT
)

DROP TABLE IF EXISTS PRISONER_INFORMATION
CREATE TABLE PRISONER_INFORMATION
(
	prisoner_id SMALLINT PRIMARY KEY IDENTITY,
	fullname NVARCHAR(50),
	gender BIT,
	birthday DATE,
	day_in DATE,
	[address] NVARCHAR(200), 
	marital_status NVARCHAR(200),
	identification NVARCHAR(1000),
	annotate NVARCHAR(2000),
	created_at DATE,
	updated_at DATE
)

DROP TABLE IF EXISTS PRISONER_DETAIL
CREATE TABLE PRISONER_DETAIL
(
	info_prisoner_id SMALLINT PRIMARY KEY IDENTITY,
	prisoner_id SMALLINT,
	prison_id SMALLINT,
	case_id SMALLINT,
	transfer_id SMALLINT,
	replase NVARCHAR(200),
	dayout SMALLINT,
	created_at DATE,
	updated_at DATE
)

DROP TABLE IF EXISTS PRISON
CREATE TABLE PRISON
(
	prison_id SMALLINT PRIMARY KEY IDENTITY,
	prison_name NVARCHAR(50),
	transfer_id SMALLINT
) 

DROP TABLE IF EXISTS TRANSFER_DETAIL
CREATE TABLE TRANSFER_DETAIL
(
	transfer_id SMALLINT PRIMARY KEY IDENTITY,
	old_prison_id SMALLINT,
	current_prison_id SMALLINT,
	total SMALLINT,
	reason NVARCHAR(2000),
	day_transfer DATE,
	info_prisoner_id SMALLINT
)

--FOREIGN KEY 
ALTER TABLE CRIME
ADD CONSTRAINT fk_CRIME_DANGEROUS_LEVEL
FOREIGN KEY (dangerous_id)
REFERENCES DANGEROUS_LEVEL (dangerous_id)
GO

ALTER TABLE [CASE]
ADD CONSTRAINT fk_CASE_DANGEROUS_LEVEL
FOREIGN KEY (id_dglvl)
REFERENCES DANGEROUS_LEVEL (dangerous_id)
GO

ALTER TABLE PRISONER_DETAIL
ADD CONSTRAINT fk_PRISONER_DETAIL_PRISONER_INFORMATION
FOREIGN KEY (prisoner_id)
REFERENCES PRISONER_INFORMATION (prisoner_id)
GO

ALTER TABLE PRISONER_DETAIL
ADD CONSTRAINT fk_PRISONER_DETAIL_CASE
FOREIGN KEY (case_id)
REFERENCES [CASE] (case_id)
GO

ALTER TABLE [PRISONER_DETAIL]
ADD CONSTRAINT fk_PRISONER_DETAIL_PRISON
FOREIGN KEY (prison_id)
REFERENCES PRISON (prison_id)
GO

ALTER TABLE PRISON
ADD CONSTRAINT fk_PRISON_TRANSFER_DETAIL
FOREIGN KEY (transfer_id)
REFERENCES TRANSFER_DETAIL (transfer_id)
GO

ALTER TABLE PRISONER_DETAIL
ADD CONSTRAINT fk_PRISONER_DETAIL_TRANSFER_DETAIL
FOREIGN KEY (transfer_id)
REFERENCES TRANSFER_DETAIL (transfer_id)
GO

--Store Proceduce
create proc selectPrisoner
@PageNumber as int, @RowOfPage as int
as
begin
	select * from PRISONER
	order by prisoner_id
	offset (@PageNumber - 1) * @RowOfPage rows
	fetch next @RowOfPage rows only
end
go

selectPrisoner 2,10

insert into PRISONER(fullname,gender,birthday,day_in,update_time,prison_id,case_id,dayout_id)
values (N'Tấn Châu',1,'2003-02-06','2003-02-07','2003-02-07',99,999,9)
go 100

create proc countPrisoner
as
begin
	select COUNT(prisoner_id) total from PRISONER
end
go